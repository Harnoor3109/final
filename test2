//
#include "xil_printf.h"
#include "stdint.h"

#define DELAY_UNIT    81
#define BTN           (*(volatile unsigned *)0x40030000)   // GPIO-3 4-bit, (btnR, btnL, btnD, btnU)
#define ANODES        (*(volatile uint32_t *)0x40006000)   // seven-segment anode control (active low, bottom 4 bits)
#define SEG           (*(volatile uint32_t *)0x40020000)   // seven-segment cathode patterns
#define LEDS          (*(volatile uint32_t *)0x40005000)   // 16 onboard LEDs
#define JXADC_CH6     (*(volatile uint16_t *)0x44a20258)   // ADC channel 6
#define JXADC_CH14    (*(volatile uint16_t *)0x44a20278)   // ADC channel 14

// assign fixed anodes for each counter
#define ANODE_LEFT    3   // leftmost digit
#define ANODE_MID     2   // next digit
#define ANODE_RIGHT   1   // next digit
// (ANODE 0 remains unused in this version)

static const uint8_t sevenSegLUT[16] = {
    0x40, 0x79, 0x24, 0x30,
    0x19, 0x12, 0x02, 0x78,
    0x00, 0x10, 0x77, 0x7C,
    0x39, 0x5E, 0x79, 0x71
};

void delay_ms(unsigned ms) {
    while (ms--) {
        for (unsigned i = 0; i < 100; i++)
            for (unsigned j = 0; j < DELAY_UNIT; j++)
                __asm__ volatile ("nop");
    }
}

_Bool up_button_press() {
    static uint8_t prev = 0;
    uint8_t curr = BTN & 0x1;
    _Bool pressed = (curr && !prev);
    prev = curr;
    return pressed;
}

int measure_duty_cycle(volatile uint16_t *adc) {
    const int samples = 1000;
    int high = 0;
    for (int i = 0; i < samples; i++) {
        uint16_t v = ((*adc >> 4) * 2400) / 4095;
        if (v > 1200) high++;
    }
    return (high * 100) / samples;
}

void strength_meter(int c0, int c1) {
    if      (c0 <= 1 || c1 <= 13) LEDS = 0xFFFF;
    else if (c0 <= 2 || c1 <= 14) LEDS = 0x3FFF;
    else if (c0 <= 3 || c1 <= 15) LEDS = 0x07FF;
    else if (c0 <= 4 || c1 <= 16) LEDS = 0x007F;
    else if (c0 <= 5 || c1 <= 17) LEDS = 0x000F;
    else if (c0 <= 6 || c1 <= 18) LEDS = 0x0007;
    else if (c0 <= 7 || c1 <= 19) LEDS = 0x0003;
    else                          LEDS = 0x0000;
}

// display a hex value (0–15) on a specific anode (0–3)
void display_on_anode(uint8_t anode, uint8_t value) {
    uint8_t pat = sevenSegLUT[value & 0x0F];
    ANODES = 0xF;                        // disable all digits
    SEG    = pat;                       // set segment bits
    ANODES = (~(1 << anode)) & 0xF;     // enable only this digit
    delay_ms(1);
}

int main() {
    uint8_t left_ctr  = 0,
            mid_ctr   = 0,
            right_ctr = 0;

    print("Start here!\n");

    while (1) {
        // 1) measure and update LEDs
        int c0 = measure_duty_cycle(&JXADC_CH6);
        int c1 = measure_duty_cycle(&JXADC_CH14);
        strength_meter(c0, c1);

        // 2) button-driven increment of exactly one counter
        if (up_button_press()) {
            if      (c0 <= 3)                              { left_ctr++;  }
            else if (c0 > 3 && c0 < 7 && c1 > 14 && c1 < 19) { mid_ctr++;   }
            else if (c1 <= 15)                             { right_ctr++; }
        }

        // 3) multiplex each counter on its own dedicated anode
        for (int i = 0; i < 50; i++) {
            display_on_anode(ANODE_LEFT,  left_ctr);
            display_on_anode(ANODE_MID,   mid_ctr);
            display_on_anode(ANODE_RIGHT, right_ctr);
        }
    }

    return 0;
}
